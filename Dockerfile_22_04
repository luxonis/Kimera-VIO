# Use an official Python runtime as a parent image
FROM ros:humble-ros-base-jammy

# Author Antoni Rosinol "arosinol@mit.edu"

# To avoid tzdata asking for geographic location...
ENV DEBIAN_FRONTEND noninteractive

# Set the working directory to /root
ENV DIRPATH /home/
WORKDIR $DIRPATH

#Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
                                          apt-utils cmake build-essential unzip pkg-config \
                                          libjpeg-dev libpng-dev libtiff-dev \
                                          libvtk9-dev \
                                          libgtk-3-dev \
                                          libparmetis-dev \
                                          libatlas-base-dev gfortran

RUN apt-get update && apt-get install -y --no-install-recommends ros-humble-desktop-full=0.10.0-1* 

# Install xvfb to provide a display to container for GUI realted testing.
RUN apt-get update && apt-get install -y xvfb
# libtbb-dev

# Install GTSAM
RUN apt-get update && apt-get install -y libboost-all-dev libopencv-dev libc++-15-dev libc6 libc6-dbg gdb valgrind software-properties-common
# ADD https://api.github.com/repos/borglab/gtsam/git/refs/heads/master version.json
RUN git clone https://github.com/borglab/gtsam.git
RUN cd gtsam && \
    git fetch && \
    git checkout af6a4f2417af4f537fe8ce43c471781267776b6c && \
    cmake -S. -Bbuild -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGTSAM_USE_SYSTEM_EIGEN=OFF -DGTSAM_POSE3_EXPMAP=ON -DGTSAM_ROT3_EXPMAP=ON -DGTSAM_TANGENT_PREINTEGRATION=OFF -DGTSAM_BUILD_TYPE_POSTFIXES=OFF -DGTSAM_WITH_TBB=OFF  && \
    cmake --build build --target install
  
#   mkdir build && \
#     cd build && \
  
#     make -j$(nproc) install

# Install Open_GV
RUN git clone https://github.com/laurentkneip/opengv
RUN cd opengv &&\
      cmake -S. -Bbuild \
      -DEIGEN_INCLUDE_DIRS=$DIRPATH/gtsam/gtsam/3rdparty/Eigen \
      -DEIGEN_INCLUDE_DIR=$DIRPATH/gtsam/gtsam/3rdparty/Eigen -DCMAKE_BUILD_TYPE=RelWithDebInfo && \
      cmake --build build --target install

# Install DBoW2
RUN git clone https://github.com/dorian3d/DBoW2.git
RUN cd DBoW2 && \
      cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo &&\
      cmake --build build --target install

# Install RobustPGO
# ADD https://api.github.com/repos/MIT-SPARK/Kimera-RPGO/git/refs/heads/master version.json
RUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git
RUN cd Kimera-RPGO && \
      cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo &&\
      cmake --build build --target install

# Get python3
RUN apt-get update && \
    add-apt-repository ppa:deadsnakes/ppa
RUN apt-get update && \
    apt-get install -y python3-dev python3-pip python3-tk python3-pyqt5

# python3.10 
# RUN pip install --upgrade pip
# RUN python3.5 -m pip install PyQt5==5.14

# Install evo-1 for evaluation
# Hack to avoid Docker's cache when evo-1 master branch is updated.
# ADD https://api.github.com/repos/ToniRV/evo-1/git/refs/heads/master version.json
RUN git clone https://github.com/ToniRV/evo-1.git
RUN cd evo-1 && python3.10 $(which pip3) install .

# Install Kimera VIO Evaluation
RUN python3.10 $(which pip3) install ipython prompt_toolkit
# Hack to avoid Docker's cache when Kimera VIO Evaluation master branch is updated.
# ADD https://api.github.com/repos/MIT-SPARK/Kimera-VIO-Evaluation/git/refs/heads/master version.json
RUN git clone https://github.com/MIT-SPARK/Kimera-VIO-Evaluation.git
# We use `pip3 install -e .` so that Jinja2 has access to the webiste template...
RUN cd Kimera-VIO-Evaluation && git fetch && git checkout master && python3.10 $(which pip3) install -e .

# Install glog, gflags
RUN apt-get update && apt-get install -y libgflags2.2 libgflags-dev libgoogle-glog0v5 libgoogle-glog-dev

# Install Pangolin
RUN apt-get update && apt-get install -y libgl1-mesa-dev libglew-dev wget
# RUN git clone https://github.com/stevenlovegrove/Pangolin.git
# RUN cd Pangolin && \
#       mkdir build && \
#       cd build && \
#       cmake .. && \
#       make -j$(nproc)


# install depthai
RUN git clone --recursive https://github.com/luxonis/depthai-core.git --branch develop
RUN cmake -Hdepthai-core -Bdepthai-core/build -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=RelWithDebInfo
RUN cmake --build depthai-core/build --target install --parallel 4


## -------------------------------------- ZSH setup -----------------------------------------------------
RUN apt-get update && apt-get install -y --no-install-recommends libusb-1.0-0-dev \
    zsh curl fzf vim && rm -rf /var/lib/apt/lists/*

# Installing oh_my_zsh!!
RUN sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"

# COPY ./.zsh_history /root/.zsh_history
COPY ./.zshrc /root/.zshrc

RUN git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
RUN git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
RUN python3 -m pip install thefuck


# Install Kimera-VIO
# RUN git clone https://github.com/sacing13/Kimera-VIO.git --branch std-oak-vio
# RUN cd Kimera-VIO && mkdir build && cd build && cmake .. && make -j1
# RUN apt-get update && apt-get install -y wget
RUN echo 'eval "$(register-python-argcomplete3 ros2)"' >> $HOME/.zshrc
RUN echo 'eval "$(register-python-argcomplete3 colcon)"' >> $HOME/.zshrc
RUN echo 'source /opt/ros/$ROS_DISTRO/setup.zsh' >> $HOME/.zshrc

RUN mkdir Kimera-VIO
COPY ./ $DIRPATH/Kimera-VIO
RUN cd Kimera-VIO && /bin/bash -c "source /opt/ros/${ROS_DISTRO}/setup.bash &&\ 
                    cmake -S. -Bbuild -DCMAKE_BUILD_TYPE=RelWithDebInfo && cmake --build build "


WORKDIR /home

# ENTRYPOINT [ "/ws/src/depthai_ros/entrypoint.sh" ]
CMD ["zsh"]